<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	
	<!-- 처음에 프로젝트 생성 시 아무내용이 없다. 여기는 공통빈을 설정하는 곳으로 view지원을 제외한 bean을 설정한다 ex) service, repository(DAO), DB, log 등등 -->
	
	<!-- Tomcat 은 Web Application 단위로 ContextPath 를 제공한다. 즉, 경로상의 /src/webapp 가 Class Path(=root path) -->
	<!-- classpath: -> src/main/resources 위치를 찾는다. -->
	<context:property-placeholder location="classpath:/dataSource.properties"/>
	
	<!-- 1. DB Connection을 위한 객체 생성 (DataSource 설정) => 기본적인 Connection을 만드는 dataSource에 프로퍼티 삽입 -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${jdbc.driverClassName}" /> <!-- 가져올 드라이버의 위치를 알려주는 driverClass -->
        <property name="url" value="${jdbc.url}"/> <!-- DB에 연결하기 위한 url -->
        <property name="username" value="${jdbc.username}" /> <!-- DB에 접속하기 위한 username, password -->
        <property name="password" value="${jdbc.password}" />
    </bean>
    
    <!-- 2. Mybatis DB 프로그램에서 사용할 객체 => Connection에 설정을 프로퍼티로 추가하여 sqlSessionFactory를 생성 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />  <!-- ref를 이용하여 1번의 dataSource를 삽입 -->
		<property name="configLocation" value="classpath:mybatis-config.xml" /> <!-- 각종 설정을 하는 mybatis-congif.xml과 연결시키는 configLocation -->
		<property name="mapperLocations" value="classpath:mappers/*Mapper.xml" /> <!-- 실행할 sql이 담겨있는 xml과 결정하는 mapperLocations -->
		<!-- DB에서 실행할 sql 문장을 태그로 정의해 놓는다. -->
	</bean>
	
	<!-- 3. Mybatis DB 프로그램의 자동화 객체(-> template) => mapperLocations, configLocation에서 사용하는 템플릿을 담아놓은 라이브러리를 sqlSessionFactory에 적용하여 sqlSession객체를 생성 -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="clearCache"> <!-- SqlSessionTemplate 이거는 clear까지 알아서 해준다. -->
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>
	<!-- 1번에서 생성된  dataSource 객체를 2번에 ref로 삽입, 2번에서 생성된 sqlSessionFactory를 3번에 ref로 삽입하여 최종적으로 sqlSession을 사용하는 과정-->
	
	<!-- 트랜잭션 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
 	</bean>
 	<tx:annotation-driven transaction-manager="transactionManager"/>
 	
 	<!-- 회원가입 메일 인증 -->
	<bean id="mailSender"	class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="smtp.gmail.com" />
		<property name="port" value="587" /><!-- 465 or 25 -->
		<property name="username" value="arangchoi40@gmail.com" />
		<property name="password" value="cmtinfo20191226" />
		<property name="defaultEncoding" value="utf-8" />
		<property name="javaMailProperties">
			<props>
				<prop key="mail.transport.protocol">smtp</prop>
				<prop key="mail.smtp.auth">true</prop>
				<prop key="mail.smtp.starttls.enable">true</prop>
				<prop key="mail.debug">true</prop>
			</props>
		</property>
	</bean>
 	
	<context:component-scan base-package="kr.or.persistence" /> 
	<context:component-scan base-package="kr.or.service" />
</beans>
